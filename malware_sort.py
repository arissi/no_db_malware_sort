#   malware_sort
#
# DESCRIPTION:
#   Categorize malware into multiple directories based on the first word output from the file command
#   and then further by separating the code by size.

import argparse
import os
import subprocess
import sys

def malware_sort():
    parser = argparse.ArgumentParser()
    parser.add_argument("mal_dir", help="The root directory where the malware is " + \
            "stored.")
    args = parser.parse_args()

    if not os.path.exists(args.mal_dir):
        sys.stderr.write("Directory  %s does not exist." % (args.mal_dir))
        exit(1)


    sizes = { "small":50001, "medium":1000001, "large":6000001, "xlarge":12000000 }

    for dirpath,_,filenames in (os.walk(args.mal_dir)):
        for f in filenames:
            mal_file = os.path.abspath(os.path.join(dirpath, f))

            output = subprocess.check_output(["file", mal_file], shell=False)
            file_type = output.split()[1]

            # fixes for wierd file command results.
            if file_type == "a":    #  /usr/bin/perl\015 script
                file_type = "PerlScript"
            elif file_type == "very":   # very short file
                file_type = "VeryShortFile"
            elif file_type == "empty":  # what to do with empty files?
                file_type = "EmptyFile"


            # see if table exists here.
            if not os.path.exists(os.path.join(args.mal_dir, file_type)):
                os.makedirs(os.path.join(args.mal_dir, file_type))

            # find out which size categort the file fits in.
            filesize = int(subprocess.check_output(["stat", "-c", "%s",
                mal_file], shell=False))

            for key, val in sizes.iteritems():
                size_path = os.path.join(args.mal_dir, file_type, key)
                if filesize < val:
                    if not os.path.exists(size_path):
                        os.makedirs(size_path)
                        os.rename(mal_file, os.path.join(size_path, f))
                        break

if __name__ == "__main__" :
    malware_sort()
